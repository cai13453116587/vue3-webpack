import { JSDOM, ConstructorOptions } from 'jsdom';
import { NavigationGuard, RouteRecordMultipleViews, MatcherLocationNormalized, RouteLocationNormalized } from '../src/types';
export declare const tick: (time?: number | undefined) => Promise<unknown>;
export declare type NAVIGATION_METHOD = 'push' | 'replace';
export declare const NAVIGATION_TYPES: NAVIGATION_METHOD[];
export interface RouteRecordViewLoose extends Pick<RouteRecordMultipleViews, 'path' | 'name' | 'components' | 'children' | 'meta' | 'beforeEnter'> {
    leaveGuards?: any;
}
export interface RouteLocationNormalizedLoose extends RouteLocationNormalized {
    name: string | undefined;
    path: string;
    params: any;
    redirectedFrom?: Partial<MatcherLocationNormalized>;
    meta: any;
    matched: Partial<RouteRecordViewLoose>[];
}
export interface MatcherLocationNormalizedLoose {
    name: string;
    path: string;
    params: any;
    redirectedFrom?: Partial<MatcherLocationNormalized>;
    meta: any;
    matched: Partial<RouteRecordViewLoose>[];
}
declare global {
    namespace NodeJS {
        interface Global {
            window: JSDOM['window'];
            location: JSDOM['window']['location'];
            document: JSDOM['window']['document'];
            before?: Function;
        }
    }
}
export declare function createDom(options?: ConstructorOptions): JSDOM;
export declare const noGuard: NavigationGuard;
export declare const components: {
    Home: {
        render: () => import("vue").VNode<any, any>;
    };
    Foo: {
        render: () => import("vue").VNode<any, any>;
    };
    Bar: {
        render: () => import("vue").VNode<any, any>;
    };
    Nested: {
        render: () => import("vue").VNode<any, any>;
    };
};
