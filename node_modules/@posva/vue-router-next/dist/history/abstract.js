"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import consola from 'consola'
const base_1 = require("./base");
const base_2 = require("./base");
// const cs = consola.withTag('abstract')
class AbstractHistory extends base_1.BaseHistory {
    constructor() {
        super();
        this.listeners = [];
        this.queue = [base_2.START];
        this.position = 0;
    }
    // TODO: is this necessary
    ensureLocation() { }
    replace(to) {
        const toNormalized = this.utils.normalizeLocation(to);
        // remove current entry and decrement position
        this.queue.splice(this.position--, 1);
        this.location = toNormalized;
    }
    push(to, data) {
        const toNormalized = this.utils.normalizeLocation(to);
        this.location = toNormalized;
    }
    listen(callback) {
        this.listeners.push(callback);
        return () => {
            const index = this.listeners.indexOf(callback);
            if (index > -1)
                this.listeners.splice(index, 1);
        };
    }
    get location() {
        return this.queue[this.position];
    }
    set location(location) {
        // super() call tries to push before the array is created
        if (!this.queue)
            this.queue = [];
        // move the queue cursor forward
        this.position++;
        if (this.position === this.queue.length) {
            // we are at the end, we can simply append a new entry
            this.queue.push(location);
        }
        else {
            // we are in the middle, we remove everything from here in the queue
            this.queue.splice(this.position);
            this.queue.push(location);
        }
    }
    back(triggerListeners = true) {
        const from = this.location;
        if (this.position > 0)
            this.position--;
        if (triggerListeners) {
            this.triggerListeners(this.location, from, {
                direction: base_1.NavigationDirection.back,
            });
        }
    }
    forward(triggerListeners = true) {
        const from = this.location;
        if (this.position < this.queue.length - 1)
            this.position++;
        if (triggerListeners) {
            this.triggerListeners(this.location, from, {
                direction: base_1.NavigationDirection.forward,
            });
        }
    }
    destroy() {
        this.listeners = [];
    }
    triggerListeners(to, from, { direction }) {
        const info = { direction };
        for (let callback of this.listeners) {
            callback(to, from, info);
        }
    }
}
exports.AbstractHistory = AbstractHistory;
//# sourceMappingURL=abstract.js.map