"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("./utils"));
// export type HistoryState = Record<string | number, string | number | boolean | undefined | null |
exports.START = {
    fullPath: '/',
    path: '/',
    query: {},
    hash: '',
};
var NavigationDirection;
(function (NavigationDirection) {
    // NOTE: is it better to have strings?
    NavigationDirection["back"] = "back";
    NavigationDirection["forward"] = "forward";
})(NavigationDirection = exports.NavigationDirection || (exports.NavigationDirection = {}));
// TODO: should BaseHistory be just an interface instead?
class BaseHistory {
    constructor() {
        // previousState: object
        this.location = exports.START;
        this.base = '';
        this.paused = false;
        this.utils = utils;
    }
}
exports.BaseHistory = BaseHistory;
//# sourceMappingURL=base.js.map