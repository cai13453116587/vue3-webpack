import pathToRegexp from 'path-to-regexp';
import { RouteRecord, RouteParams, MatcherLocation, MatcherLocationNormalized, MatcherLocationRedirect } from './types/index';
declare type NormalizedRouteRecord = Exclude<RouteRecord, {
    component: any;
}>;
export interface RouteMatcher {
    re: RegExp;
    resolve: (params?: RouteParams) => string;
    record: NormalizedRouteRecord;
    parent: RouteMatcher | void;
    keys: string[];
    score: number;
}
/**
 * Normalizes a RouteRecord into a MatchedRouteRecord. Creates a copy
 * @param record
 * @returns the normalized version
 */
export declare function normalizeRecord(record: Readonly<RouteRecord>): NormalizedRouteRecord;
export declare function createRouteMatcher(record: Readonly<NormalizedRouteRecord>, parent: RouteMatcher | void, options: pathToRegexp.RegExpOptions): RouteMatcher;
export declare class RouterMatcher {
    private matchers;
    constructor(routes: RouteRecord[]);
    private addRouteRecord;
    private insertMatcher;
    /**
     * Resolve a location without doing redirections so it can be used for anchors
     */
    resolveAsPath(): void;
    /**
     * Transforms a MatcherLocation object into a normalized location
     * @param location MatcherLocation to resolve to a url
     * @param currentLocation MatcherLocationNormalized of the current location
     */
    resolve(location: Readonly<MatcherLocation>, currentLocation: Readonly<MatcherLocationNormalized>): MatcherLocationNormalized | MatcherLocationRedirect;
}
export {};
