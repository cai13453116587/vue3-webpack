import * as utils from './utils';
import { ListenerRemover } from '../types';
export declare type HistoryQuery = Record<string, string | string[]>;
export declare type RawHistoryQuery = Record<string, string | string[] | null>;
export interface HistoryLocation {
    path: string;
    query?: RawHistoryQuery;
    hash?: string;
}
export interface HistoryLocationNormalized extends Required<HistoryLocation> {
    fullPath: string;
    query: HistoryQuery;
}
declare type HistoryStateValue = string | number | boolean | null | HistoryState | HistoryStateArray;
export interface HistoryState {
    [x: number]: HistoryStateValue;
    [x: string]: HistoryStateValue;
}
interface HistoryStateArray extends Array<HistoryStateValue> {
}
export declare const START: HistoryLocationNormalized;
export declare enum NavigationDirection {
    back = "back",
    forward = "forward"
}
export interface NavigationCallback {
    (to: HistoryLocationNormalized, from: HistoryLocationNormalized, info: {
        direction: NavigationDirection;
    }): void;
}
export declare abstract class BaseHistory {
    location: HistoryLocationNormalized;
    base: string;
    paused: boolean;
    utils: typeof utils;
    /**
     * Sync source with a different location.
     * Adds an entry to the history
     * @param to URL to go to
     */
    abstract push(to: HistoryLocation, data?: any): void;
    /**
     * Syncs source with a different location
     * Replaces current entry in the history
     * @param to URL to go to
     */
    abstract replace(to: HistoryLocation): void;
    /**
     * Goes back in history log. Should trigger any listener added via
     * `listen`. If we are on the first entry, behaviour may change depending
     * on implementation
     * @param triggerListeners should default to true. If false, won't trigger listeners added via .listen()
     */
    abstract back(triggerListeners?: boolean): void;
    /**
     * Goes forward in history log. Should trigger any listener added via
     * `listen`. If we are on the last entry, behaviour may change depending
     * on implementation
     * @param triggerListeners should default to true. If false, won't trigger listeners added via .listen()
     */
    abstract forward(triggerListeners?: boolean): void;
    /**
     * Notifies back whenever the location changes due to user interactions
     * outside of the applicaiton. For example, going back/forward on a
     * web browser
     * @param callback callback to be called whenever the route changes
     * @returns
     */
    abstract listen(callback: NavigationCallback): ListenerRemover;
    /**
     * ensure the current location matches the external source
     * For example, in HTML5 and hash history, that would be
     * location.pathname
     * TODO: is this necessary?
     */
    abstract ensureLocation(): void;
}
export {};
