import { RouteLocationNormalized, RouteLocation, MatcherLocationNormalized, MatcherLocation } from './types';
declare const isRouterError = "__RouterError";
/**
 * Generic Error coming from the Router.
 */
export declare class RouterError extends Error {
    protected __proto__: any;
    private [isRouterError];
    /**
     * Creates a Router specific Error
     *
     * @param message Error Message
     */
    constructor(message: string);
    static is(error: Error): error is RouterError;
    get name(): string;
}
declare const isNoRouteMatchError = "__NoRouteMatchError";
export declare class NoRouteMatchError extends RouterError {
    private [isNoRouteMatchError];
    constructor(location: MatcherLocation, currentLocation?: MatcherLocationNormalized);
    static is(error: Error): error is NoRouteMatchError;
}
/**
 * Error used when the matcher fails to resolve a location
 */
export declare class InvalidRouteMatch extends RouterError {
    private [isNoRouteMatchError];
    constructor(location: any);
    static is(error: Error): error is InvalidRouteMatch;
}
/**
 * Error used when rejecting a navigation because of a redirection. Contains
 * information about where we where trying to go and where we are going instead
 */
export declare class NavigationGuardRedirect extends RouterError {
    private [isNoRouteMatchError];
    to: RouteLocation;
    from: RouteLocationNormalized;
    constructor(from: RouteLocationNormalized, to: RouteLocation);
    static is(error: Error): error is NavigationGuardRedirect;
}
declare const isNavigationAborted = "__NavigationAborted";
/**
 * Navigation aborted by next(false)
 */
export declare class NavigationAborted extends RouterError {
    private [isNavigationAborted];
    to: RouteLocationNormalized;
    from: RouteLocationNormalized;
    constructor(to: RouteLocationNormalized, from: RouteLocationNormalized);
    static is(error: Error): error is NavigationAborted;
}
declare const isNavigationCancelled = "__NavigationCancelled";
/**
 * Navigation canceled by the user by pushing/replacing a new location
 * TODO: is the name good?
 */
export declare class NavigationCancelled extends RouterError {
    private [isNavigationCancelled];
    to: RouteLocationNormalized;
    from: RouteLocationNormalized;
    constructor(to: RouteLocationNormalized, from: RouteLocationNormalized);
    static is(error: Error): error is NavigationCancelled;
}
export {};
