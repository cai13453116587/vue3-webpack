import { RouteRecord, MatcherLocation, MatcherLocationNormalized, ListenerRemover } from '../types';
import { RouteRecordMatcher } from './path-matcher';
import { RouteRecordNormalized } from './types';
import { PathParserOptions } from './path-parser-ranker';
interface RouterMatcher {
    addRoute: (record: RouteRecord, parent?: RouteRecordMatcher) => ListenerRemover;
    removeRoute: {
        (matcher: RouteRecordMatcher): void;
        (name: Required<RouteRecord>['name']): void;
    };
    getRecordMatcher: (name: Required<RouteRecord>['name']) => RouteRecordMatcher | undefined;
    resolve: (location: Readonly<MatcherLocation>, currentLocation: Readonly<MatcherLocationNormalized>) => MatcherLocationNormalized;
}
export declare function createRouterMatcher(routes: RouteRecord[], globalOptions: PathParserOptions): RouterMatcher;
/**
 * Normalizes a RouteRecord. Transforms the `redirect` option into a `beforeEnter`
 * @param record
 * @returns the normalized version
 */
export declare function normalizeRouteRecord(record: Readonly<RouteRecord>): RouteRecordNormalized;
export { PathParserOptions };
