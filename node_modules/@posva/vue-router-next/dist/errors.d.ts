import { RouteLocationNormalized, RouteLocation } from './types';
export declare class NoRouteMatchError extends Error {
    constructor(currentLocation: any, location: any);
}
/**
 * Error used when the matcher fails to resolve a location
 */
export declare class InvalidRouteMatch extends Error {
    constructor(location: any);
}
/**
 * Error used when rejecting a navigation because of a redirection. Contains
 * information about where we where trying to go and where we are going instead
 */
export declare class NavigationGuardRedirect extends Error {
    to: RouteLocation;
    from: RouteLocationNormalized;
    constructor(from: RouteLocationNormalized, to: RouteLocation);
}
/**
 * Navigation aborted by next(false)
 */
export declare class NavigationAborted extends Error {
    to: RouteLocationNormalized;
    from: RouteLocationNormalized;
    constructor(to: RouteLocationNormalized, from: RouteLocationNormalized);
}
/**
 * Navigation canceled by the user by pushing/replacing a new location
 * TODO: is the name good?
 */
export declare class NavigationCancelled extends Error {
    to: RouteLocationNormalized;
    from: RouteLocationNormalized;
    constructor(to: RouteLocationNormalized, from: RouteLocationNormalized);
}
