import { RouteLocationNormalized, RouteRecord, RouteLocation, NavigationGuard, ListenerRemover, PostNavigationGuard, Immutable } from './types';
import { RouterHistory } from './history/common';
import { ScrollToPosition, ScrollPosition } from './utils/scroll';
import { Ref, App } from 'vue';
declare type ErrorHandler = (error: any) => any;
interface ScrollBehavior {
    (to: RouteLocationNormalized, from: RouteLocationNormalized, savedPosition: ScrollToPosition | null): ScrollPosition | Promise<ScrollPosition>;
}
export interface RouterOptions {
    history: RouterHistory;
    routes: RouteRecord[];
    scrollBehavior?: ScrollBehavior;
}
export interface Router {
    history: RouterHistory;
    currentRoute: Ref<Immutable<RouteLocationNormalized>>;
    resolve(to: RouteLocation): RouteLocationNormalized;
    createHref(to: RouteLocationNormalized): string;
    push(to: RouteLocation): Promise<RouteLocationNormalized>;
    replace(to: RouteLocation): Promise<RouteLocationNormalized>;
    beforeEach(guard: NavigationGuard): ListenerRemover;
    afterEach(guard: PostNavigationGuard): ListenerRemover;
    onError(handler: ErrorHandler): ListenerRemover;
    isReady(): Promise<void>;
    install(app: App): void;
}
export declare function createRouter({ history, routes, scrollBehavior, }: RouterOptions): Router;
export {};
