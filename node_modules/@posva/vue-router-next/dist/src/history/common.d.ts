import { ListenerRemover } from '../types';
import { LocationQueryRaw, LocationQuery } from '../utils/query';
interface HistoryLocation {
    fullPath: string;
    state?: HistoryState;
}
export declare type RawHistoryLocation = HistoryLocation | string;
export declare type HistoryLocationNormalized = Pick<HistoryLocation, 'fullPath'>;
export interface LocationPartial {
    path: string;
    query?: LocationQueryRaw;
    hash?: string;
}
export interface LocationNormalized {
    path: string;
    fullPath: string;
    hash: string;
    query: LocationQuery;
}
declare type HistoryStateValue = string | number | boolean | null | HistoryState | HistoryStateArray;
export interface HistoryState {
    [x: number]: HistoryStateValue;
    [x: string]: HistoryStateValue;
}
interface HistoryStateArray extends Array<HistoryStateValue> {
}
export declare enum NavigationType {
    pop = "pop",
    push = "push"
}
export declare enum NavigationDirection {
    back = "back",
    forward = "forward",
    unknown = ""
}
export interface NavigationInformation {
    type: NavigationType;
    direction: NavigationDirection;
    distance: number;
}
export interface NavigationCallback {
    (to: HistoryLocationNormalized, from: HistoryLocationNormalized, information: NavigationInformation): void;
}
export declare const START: HistoryLocationNormalized;
export declare type ValueContainer<T> = {
    value: T;
};
export interface RouterHistory {
    readonly base: string;
    readonly location: HistoryLocationNormalized;
    push(to: RawHistoryLocation): void;
    replace(to: RawHistoryLocation): void;
    back(triggerListeners?: boolean): void;
    forward(triggerListeners?: boolean): void;
    go(distance: number, triggerListeners?: boolean): void;
    listen(callback: NavigationCallback): ListenerRemover;
    destroy(): void;
}
/**
 * Transforms an URI into a normalized history location
 * @param parseQuery
 * @param location URI to normalize
 * @returns a normalized history location
 */
export declare function parseURL(parseQuery: (search: string) => LocationQuery, location: string): LocationNormalized;
/**
 * Stringify a URL object
 * @param stringifyQuery
 * @param location
 */
export declare function stringifyURL(stringifyQuery: (query: LocationQueryRaw) => string, location: LocationPartial): string;
/**
 * Strips off the base from the beginning of a location.pathname
 * @param pathname location.pathname
 * @param base base to strip off
 */
export declare function stripBase(pathname: string, base: string): string;
export declare function normalizeHistoryLocation(location: RawHistoryLocation): HistoryLocationNormalized;
export {};
